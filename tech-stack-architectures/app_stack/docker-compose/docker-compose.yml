version: '3.8'


# common settings
x-postgres-common:
  &postgres-common
  image: postgres:latest
  restart: always
  command: postgres -c 'config_file=/etc/postgresql/custom_conf.conf'
  healthcheck:
    test: 'pg_isready -U ${POSTGRES_USER:-postgres} --dbname=postgres'
    interval: 10s
    timeout: 5s
    retries: 5
  networks:
    - app_network


services:

  # Databases
  master_db:
    <<: *postgres-common
    container_name: master_db  # do not change the name, otherwise you might have to change other settings also
    environment:
      POSTGRES_USER:  ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      REPLICATION_USER: ${REPLICATION_USER:-replication_user}
      REPLICATION_PASSWORD: ${REPLICATION_PASSWORD:-replication_password}
      POSTGRES_DB: ${DB_NAME}
      LANG: en_US.UTF-8
      LC_ALL: en_US.UTF-8
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 192.168.0.0/22 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      # - ./docker_fs/master_db:/var/lib/postgresql/data
      - ./conf/master_postgres.conf:/etc/postgresql/custom_conf.conf
      - ./conf/master_init.sh:/docker-entrypoint-initdb.d/master_init.sh
      # - ./conf/master_pg_hba.conf:/var/lib/postgresql/data/pg_hba.conf


  slave_db1:
    <<: *postgres-common
    container_name: slave_db1
    environment:
      POSTGRES_USER:  ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      REPLICATION_USER: ${REPLICATION_USER:-replication_user}
      REPLICATION_PASSWORD: ${REPLICATION_PASSWORD:-replication_password}
      POSTGRES_DB: ${DB_NAME}
      LANG: en_US.UTF-8
      LC_ALL: en_US.UTF-8
      MASTER_HOST: master_db
      MASTER_PORT: 5432
    volumes:
      # - ./docker_fs/slave_db1:/var/lib/postgresql/data
      - ./conf/slave_postgres.conf:/etc/postgresql/custom_conf.conf
      - ./conf/slave_init.sh:/docker-entrypoint-initdb.d/slave_init.sh
      # - ./conf/salve_pg_hba.conf:/var/lib/postgresql/data/pg_hba.conf
    depends_on:
      - master_db
  
  slave_db2:
    <<: *postgres-common
    container_name: slave_db2
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      MASTER_HOST: master_db
      MASTER_PORT: 5432
    volumes:
      - ./docker_fs/slave_db2:/var/lib/postgresql/data
      - ./conf/slave_postgres.conf:/etc/postgresql/custom_conf.conf
      - ./conf/slave_init.sh:/docker-entrypoint-initdb.d/slave_init.sh
      # - ./conf/salve_pg_hba.conf:/var/lib/postgresql/data/pg_hba.conf
    depends_on:
      - master_db

  # /api/django
  django_app:
    build:
      context: ./apps/django
      dockerfile: Dockerfile
    container_name: django_app
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@master_db/app_db
    networks:
      - app_network
    depends_on:
      - master_db

  # /api/express
  express_app:
    build:
      context: ./apps/express
      dockerfile: Dockerfile
    container_name: express_app
    command: pm2-runtime start app.js --name "express-app"
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@master_db/app_db
    networks:
      - app_network
    depends_on:
      - master_db

  # /api/fastapi
  fastapi_app:
    build:
      context: ./apps/fastapi
      dockerfile: Dockerfile
    container_name: fastapi_app
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@master_db/app_db
    networks:
      - app_network
    depends_on:
      - master_db

  # frontend app served at /
  nextjs_app:
    build:
      context: ./apps/nextjs
      dockerfile: Dockerfile
    container_name: nextjs_app
    command: pm2-runtime start npm --name "nextjs-app" -- start
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@master_db/app_db
    networks:
      - app_network
    depends_on:
      - master_db
      - django_app
      - express_app
      - fastapi_app

  # Nginx: Entry Point
  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./conf/nginx.conf:/etc/nginx/nginx.conf
      - ../keys:/etc/nginx/keys
    ports:
      - "80:80" # for http
      - "8080:8080"  # for healthcheck: limited access to 127.0.0.1:8080
      - "443:443"  # for https
    networks:
      - app_network
    depends_on:
      - nextjs_app

  # Static server
  static_server:
    image: httpd:latest
    container_name: static_server
    volumes:
      - ./apps/static_assets:/usr/local/apache2/htdocs/
    networks:
      - app_network

volumes:
  conf:
    driver: local
    driver_opts:
      type: bind
      o: bind
      device: ./conf
  keys:
    driver: local
    driver_opts:
      type: bind
      o: bind
      device: ../keys
  static_assets:
    driver: local
    driver_opts:
      type: bind
      o: bind
      device: ./apps/static_assets
  master_db_data:
    driver: local
    driver_opts:
      type: bind
      o: bind
      device: ./docker_fs/master_db
  slave_db1_data:
    driver: local
    driver_opts:
      type: bind
      o: bind
      device: ./docker_fs/slave_db1
  slave_db2_data:
    driver: local
    driver_opts:
      type: bind
      o: bind
      device: ./docker_fs/slave_db2
  
networks:
  app_network:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.0.0/22  # usable ip range 192.168.1.1 - 192.168.1.14
