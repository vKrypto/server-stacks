version: '3.8'

services:

  # Databases
  master_db:
    image: postgres:latest
    container_name: master_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: app_db
      REPLICATION_USER: ${REPLICATION_USER}
      REPLICATION_PASSWORD: ${REPLICATION_PASSWORD}
    volumes:
      - master_db_data:/var/lib/postgresql/data
      - conf:/etc/postgresql
      - conf/master_init.sh:/docker-entrypoint-initdb.d/master_init.sh
    command: postgres -c 'config_file=/etc/postgresql/master_postgres.conf'
    networks:
      - app_network

  slave_db1:
    image: postgres:latest
    container_name: slave_db1
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: app_db
      REPLICATION_USER: ${REPLICATION_USER}
      REPLICATION_PASSWORD: ${REPLICATION_PASSWORD}
    volumes:
      - slave_db1_data:/var/lib/postgresql/data
      - conf:/etc/postgresql
      - ./conf/slave_init.sh:/docker-entrypoint-initdb.d/slave_init.sh
    command: postgres -c 'config_file=/etc/postgresql/slave_postgres.conf'
    networks:
      - app_network

  slave_db2:
    image: postgres:latest
    container_name: slave_db2
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: app_db
      REPLICATION_USER: ${REPLICATION_USER}
      REPLICATION_PASSWORD: ${REPLICATION_PASSWORD}
    volumes:
      - slave_db2_data:/var/lib/postgresql/data
      - conf:/etc/postgresql
      - ./conf/slave_init.sh:/docker-entrypoint-initdb.d/slave_init.sh
    command: postgres -c 'config_file=/etc/postgresql/slave_postgres.conf'
    networks:
      - app_network
  
  # /api/django
  django_app:
    image: tiangolo/uvicorn-gunicorn-django:python3.8
    container_name: django_app
    volumes:
      - django-app-data:/app
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@master_db/app_db
    networks:
      - app_network

  # /api/express
  express_app:
    image: node:latest
    container_name: express_app
    command: pm2-runtime start app.js --name "express-app"
    volumes:
      - express-app-data:/usr/src/app
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@master_db/app_db
    networks:
      - app_network

  fastapi_app:
    image: tiangolo/uvicorn-gunicorn-fastapi:python3.8
    container_name: fastapi_app
    volumes:
      - fastapi-app-data:/app
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@master_db/app_db
    networks:
      - app_network

  nextjs_app:
    image: node:latest
    container_name: nextjs_app
    command: pm2-runtime start npm --name "nextjs-app" -- start
    volumes:
      - nextjs-app-data:/usr/src/app
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@master_db/app_db
    networks:
      - app_network

  # Nginx: Entry Point
  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - conf/nginx.conf:/etc/nginx/nginx.conf
      - keys:/etc/nginx/keys
    ports:
      - "80:80" # for http
      - "8080:8080"  # for healthcheck: limited access to 127.0.0.1:8080
      - "443:443"  # for https
    networks:
      - app_network

  # Static server
  static_server:
    image: httpd:latest
    container_name: static_server
    volumes:
      - static-data:/usr/local/apache2/htdocs/
    networks:
      - app_network

volumes:
  conf:
    driver: local
    driver_opts:
      o: bind
      device: ./conf
  keys:
    driver: local
    driver_opts:
      o: bind
      device: ./../keys
  django-app-data:
    driver: local
    driver_opts:
      o: bind
      device: ./../sample_apps/django-app
  express-app-data:
    driver: local
    driver_opts:
      o: bind
      device: ./../sample_apps/express-app
  fastapi-app-data:
    driver: local
    driver_opts:
      o: bind
      device: ./../sample_apps/fastapi-app
  nextjs-app-data:
    driver: local
    driver_opts:
      o: bind
      device: ./../sample_apps/nextjs-app
  static-data:
    driver: local
    driver_opts:
      o: bind
      device: ./../sample_apps/static

networks:
  app_network:
    driver: bridge
